Consumers

 The TAP Consumer is responsible for reading TAP. It can read TAP from a file 
 or from a String. The method used to load TAP is load(). It returns a 
 {{{TestSet}}} object. Take a look at the TAP sample below. 
 
+---+
1..0 skip Testing...
not ok 1 Failed to execute IO operation. # Reviewing
ok 2 Test passed OK! # SKIP Always skip
not ok 3 Failed to execute IO operation. # Reviewing
# Sample comment
ok 4 Test passed OK! # TODO We'll implement this in the next release.
not ok 5 Failed to execute IO operation. # Reviewing
ok 6 Test passed OK! # TODO We'll implement this in the next release.
Bail out! Server unavailable!
Text to be ignored
not ok 7 Failed to execute IO operation. # Reviewing
ok 8 Test passed OK! # TODO We'll implement this in the next release.
not ok 9 Failed to execute IO operation. # Reviewing
ok 10 Test passed OK! # TODO We'll implement this in the next release.
+---+

 Using tap4j read the TAP above is easy as a piece of cake. 
 First you instantiate a new TAP Consumer. It is done using 
 {{{TapConsumerFactory}ffff}}. The method load() of the 
 TAP Consumer returns a {{http://tap4j.sourceforge.net/apidocs/br/eti/kinoshita/tap4j/model/TestSet.html}}TestSet. The TestSet contains Header, Plan, TestResult's, 
 Comments and Footer. 
 
+---+
...
public static void main ( String[] args ) 
throws TapParserException
{
	TapConsumer consumer = TapConsumerFactory.makeTap13YamlConsumer();
		
	TestSet testSet = consumer.load(new File(ClassLoader.getSystemResource("input.tap").getFile()));
	
	System.out.println( "Found " + testSet.getNumberOfTestResults() + " test results." );
	
	System.out.println( "Found " + testSet.getNumberOfComments() + " comments." );
	
	System.out.println( "TAP Plan: " + testSet.getPlan() );
	
	System.out.println( "TAP Plan Skip reason: " + testSet.getPlan().getSkip().getReason() );
}
...
+---+

 Causing the following output:
 
+---+
Found 10 test results.
Found 1 comments.
TAP Plan: 1..0 skip Testing...
TAP Plan Skip reason: Testing...
+---+
 
* yaml-like diagnostic 

 Starting in version 1.1, tap4j parsers yaml-like diagnostic blocks. 

+---+
1..4
ok 1 testDirective
ok 2 testNoReason
not ok 3
  ---
  file: br.eti.kinoshita.tap4j.CarTest
  description: A simple test with cars
  wanted: '198km'
  found: '120km'
  extensions:
    Start: 1287077800020
    End: 1287077800020
  ...
ok 4 testTapProducer
+---+

 Tap4j supports Yaml diagnostic blocks thanks to 
 {{{http://code.google.com/p/snakeyaml/}snakeyaml}} project. However you must 
 use a different Consumer.
 
+---+
...
public static void main ( String[] args ) 
throws TapParserException
{

	TapConsumer consumer = TapConsumerFactory.makeTap13YamlConsumer();
		
    TestSet testSet = consumer.load( new File(LetsSee.class.getResource("/input.tap").getFile()) );
		
    System.out.println( "Found " + testSet.getNumberOfTestResults() + " test results." );
	    
    String file = testSet.getTestResult( 3 ).getDiagnostic().get("file").toString();
    
    System.out.println("Test result number 3 file: " + file);
}
...
+---+

 The diagnostics object is a LinkedHashMap<String, Object>. The output of the code 
 above is shown below. 
 
+---+
Found 4 test results.
Test result number 3 file: br.eti.kinoshita.tap4j.CarTest
+---+
